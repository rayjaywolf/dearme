<header class="header">
  <nav class="header__left">
    {% assign main_menu = linklists['main-menu'].links %}
    {% for link in main_menu %}
      <a href="{{ link.url }}">{{ link.title }}</a>
    {% endfor %}
  </nav>
  <div class="header__center">
    <a href="{{ routes.root_url }}">
      <img
        src="{{ 'logo.png' | asset_url }}"
        alt="{{ shop.name }} logo"
        class="header__logo header__logo--light"
        width="180"
        height="48"
      >
      <img
        src="{{ 'logo-dark.png' | asset_url }}"
        alt="{{ shop.name }} logo"
        class="header__logo header__logo--dark"
        width="180"
        height="48"
      >
    </a>
  </div>
  <div class="header__right">
    <div class="header__icons-pill">
      {% if shop.customer_accounts_enabled %}
        <a href="{{ routes.account_url }}" class="header__icon">{{ 'icon-account.svg' | inline_asset_content }}</a>
      {% endif %}
      <span class="header__icon-separator"></span>
      <a href="{{ routes.cart_url }}" class="header__icon">
        {{ 'icon-cart.svg' | inline_asset_content }}
        {% if cart.item_count > 0 %}
          <sup>{{ cart.item_count }}</sup>
        {% endif %}  
      </a>
    </div>
  </div>
</header>

<div id="header-trigger"></div>

{% stylesheet %}
  #header-trigger {
    position: absolute;
    top: 10vh;
    height: 1px;
    width: 100%;
    pointer-events: none;
  }

  .header {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    align-items: center;
    height: 5rem;
    padding: 0 4rem;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 100;
    transition: transform 0.4s ease-in-out;
    will-change: transform;
  }

  /*
   NEW: The ::before pseudo-element.
   This element holds the expensive blur and background color.
   It's always present but starts as invisible (opacity: 0).
*/
  .header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #63001f;
    backdrop-filter: blur(10px);
    z-index: -1;
    /* Sits behind the header content */
    opacity: 0;
    transition: opacity 0.4s ease;
    will-change: opacity;
    /* Hint to the browser to optimize this */
  }

  /* When the header is scrolled, we just fade in the pseudo-element */
  .header.header--scrolled::before {
    opacity: 1;
  }

  .header.header--hidden {
    transform: translateY(-100%);
  }

  .header.header--scrolled {
    /* The box-shadow is cheap, so it can be applied directly */
    box-shadow: 0 2px 7px rgba(0, 0, 0, 0.05);
  }

  .header__left {
    display: flex;
    justify-content: flex-start;
    gap: 1.75rem;
    z-index: 1;
    /* Ensures content is above the pseudo-element */
  }

  .header__center {
    display: flex;
    justify-content: center;
    z-index: 1;
  }

  .header__right {
    display: flex;
    justify-content: flex-end;
    z-index: 1;
  }

  .header__left a {
    text-decoration: none;
    font-family: 'Inter', sans-serif;
    font-weight: 500;
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    position: relative;
    transition: color 0.4s ease;
    color: #fff;
  }

  .header.header--scrolled .header__left a {
    color: #ead1c1;
  }

  .header__logo {
    height: 30px;
    width: auto;
    display: block;
    transition: opacity 0.4s ease;
  }

  .header__logo--light {
    opacity: 1;
  }

  .header.header--scrolled .header__logo--light {
    opacity: 0;
  }

  .header__logo--dark {
    opacity: 0;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }

  .header.header--scrolled .header__logo--dark {
    opacity: 1;
  }

  .header__left a::after {
    content: '';
    position: absolute;
    bottom: -3px;
    left: 0;
    height: 1px;
    width: 100%;
    background-color: currentColor;
    transform-origin: bottom right;
    transform: scaleX(0);
    transition: transform 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  }

  .header__left a:hover::after {
    transform-origin: bottom left;
    transform: scaleX(1);
  }

  .header__icons-pill {
    display: flex;
    align-items: center;
    background: #fff;
    border-radius: 999px;
    padding: 0.3rem 1rem;
    gap: 0.3rem;
    border: 1px solid rgba(0, 0, 0, 0.3);
    transition: background-color 0.4s ease, border-color 0.4s ease;
  }

  .header.header--scrolled .header__icons-pill {
    background: #63001f;
    border-color: #ead1c1;
  }

  .header__icon-separator {
    display: block;
    width: 1px;
    height: 1.75rem;
    background: rgba(0, 0, 0, 0.3);
    margin: 0 0.6rem;
    border-radius: 1px;
    transition: background-color 0.4s ease;
  }

  .header.header--scrolled .header__icon-separator {
    background: #ead1c1;
  }

  .header__icon {
    display: flex;
    align-items: center;
    position: relative;
  }

  .header__icon svg {
    width: 1.5rem;
    height: 1.5rem;
    color: rgba(0, 0, 0, 0.5);
    transition: color 0.4s ease;
  }

  .header.header--scrolled .header__icon svg {
    color: #ead1c1;
  }

  .header__icon sup {
    position: absolute;
    top: -0.5rem;
    right: -0.5rem;
    background: #63001f;
    color: #fff;
    border-radius: 50%;
    padding: 0 0.4em;
    font-size: 0.8em;
  }
{% endstylesheet %}

{% javascript %}
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('.header');
    const trigger = document.querySelector('#header-trigger');

    if (!header || !trigger) return;

    // Observer for the color/style change
    const styleObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          header.classList.toggle('header--scrolled', !entry.isIntersecting);
        });
      },
      { threshold: 1.0 }
    );

    styleObserver.observe(trigger);

    // Logic for hiding/showing header on scroll direction
    let lastScrollTop = 0;
    const hideThreshold = 300; // Pixels from top to start hiding

    window.addEventListener(
      'scroll',
      () => {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

        if (currentScroll > lastScrollTop && currentScroll > hideThreshold) {
          // Scrolling down
          header.classList.add('header--hidden');
        } else {
          // Scrolling up
          header.classList.remove('header--hidden');
        }
        lastScrollTop = currentScroll <= 0 ? 0 : currentScroll;
      },
      { passive: true }
    );
  });
{% endjavascript %}
